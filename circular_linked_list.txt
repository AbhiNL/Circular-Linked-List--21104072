
Q1. While traversing a single-circular linked list,
which condition establishes that the traversing element/variable has reached the first element?

Ans1.
When we create a new linked list we set first element as head and when we  
add elements to linked list.  
 ​​# The address of the 1st element is added in the last element so that the list is  
 ​​  circular. 
 ​​# While traversing the linked list we create a temp pointer. 
 ​​# Temp pointer points to head so that while traversing orignal head i.e. 1st element  
 ​​  address is not lost. 
 ​​# At the tail i.e. last element of linked list : 
 ​​            temp -> next = head points at head 
 ​​ and        temp = temp -> next    
 ​​ temp will now be our head  
 ​​ or 
 ​ while traversing we can simply put a condition  
 ​​ do{ 
 ​     temp = temp -> next; 
 ​​ } 
 ​​ while(temp != head); 
 ​​ this will stop when temp is head.

  
Q2. What are the practical applications of a circular linked list? (Try to find applications in your respective fields)
Ans2)

PRACTICAL APPLICATIONS OF CIRCULAR LINKED LIST:

1)Stacks and queues are implemented by using circular linked list.

2) The browser cache which allows you to hit the BACK button. Circular linked list is used to store cache in browser,
so that we can reload a visited page again by hitting BACK button.

3) Multiplayer games employ circular lists to switch between players in loop. It determines who’s turn is it in the game of multi-players.
 All players are placed in a circular list linked. When a player has taken his turn, move towards the player next on the list.

4) Circular Doubly Linked Lists are used for the implementation of advanced data structures like Fibonacci Heap.

5)In photoshop, word, or any paint we use this concept in undo function.
